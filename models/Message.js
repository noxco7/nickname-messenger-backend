// =====================================================
// –§–ê–ô–õ: models/Message.js (BACKEND) - COMPLETE VERSION
// –ü–£–¢–¨: nickname-messenger-backend/models/Message.js
// –¢–ò–ü: Node.js Backend
// –û–ü–ò–°–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π —Å E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
// =====================================================

const mongoose = require('mongoose');

const EncryptionDataSchema = new mongoose.Schema({
    algorithm: {
        type: String,
        required: true,
        enum: ['AES-256-GCM'],
        default: 'AES-256-GCM'
    },
    keyDerivation: {
        type: String,
        required: true,
        enum: ['HKDF-SHA256'],
        default: 'HKDF-SHA256'
    },
    iv: {
        type: String,
        required: true
    },
    authTag: {
        type: String,
        required: true
    },
    salt: {
        type: String,
        required: true
    },
    senderPublicKey: {
        type: String,
        required: true
    },
    version: {
        type: String,
        required: true,
        default: '1.0'
    },
    fingerprint: {
        type: String,
        required: true
    }
}, { _id: false });

const ReadReceiptSchema = new mongoose.Schema({
    userId: {
        type: String, // UUID
        required: true
    },
    readAt: {
        type: Date,
        default: Date.now
    }
}, { _id: false });

const MessageSchema = new mongoose.Schema({
    chatId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Chat',
        required: true
    },
    senderId: {
        type: String, // UUID
        ref: 'User',  // <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
        required: true
    },
    content: {
        type: String,
        required: true,
        maxlength: 10000 // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    },
    messageType: {
        type: String,
        enum: ['text', 'crypto', 'system', 'encrypted'],
        default: 'text'
    },
    
    // –ù–û–í–û–ï: E2E Encryption support
    isEncrypted: {
        type: Boolean,
        default: false
    },
    encryptionData: {
        type: EncryptionDataSchema,
        default: null
    },
    
    // Crypto payment fields
    cryptoAmount: {
        type: Number,
        min: 0
    },
    transactionHash: {
        type: String
    },
    transactionStatus: {
        type: String,
        enum: ['pending', 'confirmed', 'failed']
    },
    
    // Message status and delivery
    deliveryStatus: {
        type: String,
        enum: ['sending', 'delivered', 'failed', 'read'],
        default: 'delivered'
    },
    readReceipts: [ReadReceiptSchema]
    
}, {
    timestamps: true,
    collection: 'messages'
});

// –ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
MessageSchema.pre('save', function(next) {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    if (this.isEncrypted && this.messageType === 'encrypted') {
        if (!this.encryptionData) {
            return next(new Error('Encryption data is required for encrypted messages'));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        const requiredFields = ['algorithm', 'keyDerivation', 'iv', 'authTag', 'salt', 'senderPublicKey', 'fingerprint'];
        for (const field of requiredFields) {
            if (!this.encryptionData[field]) {
                return next(new Error(`Encryption data field '${field}' is required`));
            }
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ, —É–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    if (!this.isEncrypted) {
        this.encryptionData = null;
    }
    
    next();
});

// –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
MessageSchema.methods.markAsRead = function(userId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ –ª–∏ —É–∂–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const existingReceipt = this.readReceipts.find(receipt => receipt.userId === userId);
    
    if (!existingReceipt) {
        this.readReceipts.push({
            userId: userId,
            readAt: new Date()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        if (this.senderId === userId) {
            this.deliveryStatus = 'read';
        }
    }
    
    return this;
};

// –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
MessageSchema.methods.isReadBy = function(userId) {
    return this.readReceipts.some(receipt => receipt.userId === userId);
};

// –ù–û–í–û–ï: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
MessageSchema.methods.getEncryptionInfo = function() {
    if (!this.isEncrypted || !this.encryptionData) {
        return null;
    }
    
    return {
        algorithm: this.encryptionData.algorithm,
        version: this.encryptionData.version,
        fingerprint: this.encryptionData.fingerprint,
        isEncrypted: true
    };
};

// –ù–û–í–û–ï: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
MessageSchema.statics.createEncrypted = function(messageData, encryptionData) {
    return new this({
        ...messageData,
        messageType: 'encrypted',
        isEncrypted: true,
        encryptionData: encryptionData
    });
};

// –ù–û–í–û–ï: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
MessageSchema.virtual('displayContent').get(function() {
    if (this.isEncrypted && this.messageType === 'encrypted') {
        return 'üîê Encrypted message';
    }
    
    switch (this.messageType) {
        case 'text':
        case 'encrypted':
            return this.content;
        case 'crypto':
            if (this.cryptoAmount) {
                return `üí∞ Sent ${this.cryptoAmount.toFixed(6)} USDT`;
            }
            return 'üí∞ Crypto transaction';
        case 'system':
            return this.content;
        default:
            return this.content;
    }
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
MessageSchema.index({ chatId: 1, createdAt: -1 });
MessageSchema.index({ senderId: 1 });
MessageSchema.index({ messageType: 1 });
MessageSchema.index({ isEncrypted: 1 });
MessageSchema.index({ deliveryStatus: 1 });

// –ù–û–í–û–ï: –ò–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
MessageSchema.index({ 
    chatId: 1, 
    isEncrypted: 1, 
    'encryptionData.senderPublicKey': 1 
});

// –í–∫–ª—é—á–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ JSON
MessageSchema.set('toJSON', { 
    virtuals: true,
    transform: function(doc, ret) {
        // –£–¥–∞–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
        if (ret.isEncrypted && ret.encryptionData) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        }
        return ret;
    }
});

MessageSchema.set('toObject', { virtuals: true });

module.exports = mongoose.model('Message', MessageSchema);