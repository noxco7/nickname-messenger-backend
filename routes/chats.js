const express = require('express');
const Chat = require('../models/Chat');
const Message = require('../models/Message');
const User = require('../models/User');
const router = express.Router();

router.post('/create', async (req, res) => {
    try {
        const { participants } = req.body;
        
        console.log('üí¨ Creating chat request received');
        console.log('üìù Participants:', participants);
        
        if (!participants || !Array.isArray(participants) || participants.length !== 2) {
            console.log('‚ùå Invalid participants format');
            return res.status(400).json({ error: 'Exactly 2 participants required' });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –ø–æ participants (–Ω–µ –ø–æ _id)
        const existingChat = await Chat.findOne({
            participants: { $all: participants },
            participants: { $size: 2 } // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ direct —á–∞—Ç
        }).populate('lastMessage');
        
        if (existingChat) {
            console.log('‚úÖ Found existing chat:', existingChat._id);
            return res.json({
                _id: existingChat._id.toString(),
                participants: existingChat.participants,
                lastMessage: existingChat.lastMessage,
                lastMessageAt: existingChat.lastMessageAt,
                chatType: existingChat.chatType,
                isActive: existingChat.isActive,
                createdAt: existingChat.createdAt,
                updatedAt: existingChat.updatedAt
            });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ _id
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ participant ID
        console.log('üí¨ Creating new chat with participants:', participants);
        
        const chat = new Chat({ 
            participants: participants,
            chatType: 'direct',
            isActive: true
        });
        
        await chat.save();
        console.log('‚úÖ Chat created successfully:', chat._id);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º –∫–ª–∏–µ–Ω—Ç–æ–º
        res.status(201).json({
            _id: chat._id.toString(),
            participants: chat.participants,
            lastMessage: chat.lastMessage,
            lastMessageAt: chat.lastMessageAt,
            chatType: chat.chatType,
            isActive: chat.isActive,
            createdAt: chat.createdAt,
            updatedAt: chat.updatedAt
        });
        
    } catch (error) {
        console.error('‚ùå Create chat error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

router.get('/user/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        console.log('üí¨ Getting chats for user:', userId);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—â–µ–º —á–∞—Ç—ã –ø–æ participants (—Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤)
        const chats = await Chat.find({ 
            participants: userId,
            isActive: true 
        })
        .populate('lastMessage')
        .sort({ lastMessageAt: -1 })
        .limit(limit)
        .skip(offset);
        
        console.log(`‚úÖ Found ${chats.length} chats for user ${userId}`);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        const formattedChats = chats.map(chat => ({
            _id: chat._id.toString(),
            participants: chat.participants,
            lastMessage: chat.lastMessage,
            lastMessageAt: chat.lastMessageAt,
            chatType: chat.chatType,
            isActive: chat.isActive,
            createdAt: chat.createdAt,
            updatedAt: chat.updatedAt
        }));
        
        res.json(formattedChats);
        
    } catch (error) {
        console.error('‚ùå Get user chats error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

module.exports = router;