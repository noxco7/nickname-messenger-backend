// =====================================================
// –§–ê–ô–õ: routes/chats.js (BACKEND) - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–£–¢–¨: nickname-messenger-backend/routes/chats.js
// –¢–ò–ü: Node.js Backend
// –û–ü–ò–°–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã —Ä–æ—É—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º lastMessage –∫–∞–∫ String ID
// =====================================================

const express = require('express');
const Chat = require('../models/Chat');
const Message = require('../models/Message');
const { authenticateToken } = require('../middleware/auth');
const router = express.Router();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ UUID
function normalizeUUID(uuid) {
    if (!uuid || typeof uuid !== 'string') return uuid;
    return uuid.toUpperCase();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ UUID
function normalizeUUIDs(uuids) {
    if (!Array.isArray(uuids)) return uuids;
    return uuids.map(uuid => normalizeUUID(uuid));
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
function checkChatAccess(chat, userId) {
    const userIdNormalized = normalizeUUID(userId);
    const participantsNormalized = normalizeUUIDs(chat.participants);
    
    console.log('üîç DEBUGGING CHAT ACCESS:');
    console.log('   - User ID (normalized):', userIdNormalized);
    console.log('   - Chat participants (normalized):', participantsNormalized);
    
    const hasAccess = participantsNormalized.includes(userIdNormalized);
    console.log('   - Has access:', hasAccess);
    
    return hasAccess;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ (–ë–ï–ó populate lastMessage)
function formatChatResponse(chat) {
    return {
        _id: chat._id.toString(),
        participants: chat.participants,
        lastMessage: chat.lastMessage ? chat.lastMessage.toString() : null, // –¢–û–õ–¨–ö–û ID –∫–∞–∫ String
        lastMessageAt: chat.lastMessageAt,
        chatType: chat.chatType,
        isActive: chat.isActive,
        createdAt: chat.createdAt,
        updatedAt: chat.updatedAt
    };
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û)
router.post('/create', authenticateToken, async (req, res) => {
    try {
        const { participants } = req.body;
        const currentUserId = req.user.id;
        
        console.log('üí¨ Creating chat request received from user:', req.user.nickname);
        console.log('üìù Original participants:', participants);
        console.log('üîê Current user ID from JWT:', currentUserId);
        
        if (!participants || !Array.isArray(participants) || participants.length !== 2) {
            console.log('‚ùå Invalid participants format');
            return res.status(400).json({ error: 'Exactly 2 participants required' });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ UUID –∫ uppercase
        const normalizedParticipants = normalizeUUIDs(participants);
        const normalizedCurrentUserId = normalizeUUID(currentUserId);
        
        console.log('üîÑ NORMALIZATION:');
        console.log('   - Original participants:', participants);
        console.log('   - Normalized participants:', normalizedParticipants);
        console.log('   - Original current user ID:', currentUserId);
        console.log('   - Normalized current user ID:', normalizedCurrentUserId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
        if (!normalizedParticipants.includes(normalizedCurrentUserId)) {
            console.log('‚ùå Current user not in participants list');
            return res.status(403).json({ error: 'You must be a participant in the chat' });
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const sortedParticipants = [...normalizedParticipants].sort();
        
        console.log('üîç Looking for existing chat with sorted participants:', sortedParticipants);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º lastMessage –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
        const existingChat = await Chat.findOne({
            participants: { $all: sortedParticipants },
            participants: { $size: 2 }
        });
        
        if (existingChat) {
            console.log('‚úÖ Found existing chat:', existingChat._id);
            console.log('   - Existing chat participants:', existingChat.participants);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º lastMessage –∫–∞–∫ String ID
            return res.json(formatChatResponse(existingChat));
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        console.log('üí¨ Creating new chat with participants:', sortedParticipants);
        
        const chat = new Chat({ 
            participants: sortedParticipants,
            chatType: 'direct',
            isActive: true
        });
        
        await chat.save();
        console.log('‚úÖ Chat created successfully:', chat._id);
        console.log('   - Saved participants:', chat.participants);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º lastMessage –∫–∞–∫ String ID
        res.status(201).json(formatChatResponse(chat));
        
    } catch (error) {
        console.error('‚ùå Create chat error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ó–ê–©–ò–©–ï–ù–û)
router.get('/user/:userId', authenticateToken, async (req, res) => {
    try {
        const { userId } = req.params;
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID
        const normalizedUserId = normalizeUUID(userId);
        const normalizedCurrentUserId = normalizeUUID(req.user.id);
        
        console.log('üí¨ Getting chats for user:', userId);
        console.log('   - Normalized user ID:', normalizedUserId);
        console.log('   - Normalized current user ID:', normalizedCurrentUserId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–≤–æ–∏ —á–∞—Ç—ã
        if (normalizedUserId !== normalizedCurrentUserId) {
            console.log('‚ùå User trying to access another user\'s chats');
            return res.status(403).json({ error: 'Access denied. You can only view your own chats' });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º lastMessage
        const chats = await Chat.find({ 
            participants: normalizedUserId,
            isActive: true 
        })
        .sort({ lastMessageAt: -1 })
        .limit(limit)
        .skip(offset);
        
        console.log(`‚úÖ Found ${chats.length} chats for user ${req.user.nickname}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å lastMessage –∫–∞–∫ String ID
        const formattedChats = chats.map(formatChatResponse);
        
        res.json(formattedChats);
        
    } catch (error) {
        console.error('‚ùå Get user chats error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —á–∞—Ç–æ–≤ (–ó–ê–©–ò–©–ï–ù–û - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π endpoint)
router.get('/my', authenticateToken, async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—É—â–∏–π user ID
        const normalizedCurrentUserId = normalizeUUID(req.user.id);
        
        console.log('üí¨ Getting chats for authenticated user:', req.user.nickname);
        console.log('   - Normalized user ID:', normalizedCurrentUserId);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º lastMessage
        const chats = await Chat.find({ 
            participants: normalizedCurrentUserId,
            isActive: true 
        })
        .sort({ lastMessageAt: -1 })
        .limit(limit)
        .skip(offset);
        
        console.log(`‚úÖ Found ${chats.length} chats for user ${req.user.nickname}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å lastMessage –∫–∞–∫ String ID
        const formattedChats = chats.map(formatChatResponse);
        
        res.json(formattedChats);
        
    } catch (error) {
        console.error('‚ùå Get my chats error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
router.get('/my/with-messages', authenticateToken, async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        const normalizedCurrentUserId = normalizeUUID(req.user.id);
        
        console.log('üí¨ Getting chats with full message info for user:', req.user.nickname);
        console.log('   - Normalized user ID:', normalizedCurrentUserId);
        
        // –ó–î–ï–°–¨ –ø–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º lastMessage –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const chats = await Chat.find({ 
            participants: normalizedCurrentUserId,
            isActive: true 
        })
        .populate('lastMessage') // –ü–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        .sort({ lastMessageAt: -1 })
        .limit(limit)
        .skip(offset);
        
        console.log(`‚úÖ Found ${chats.length} chats with full message info`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        const formattedChats = chats.map(chat => ({
            _id: chat._id.toString(),
            participants: chat.participants,
            lastMessage: chat.lastMessage, // –ü–û–õ–ù–´–ô –æ–±—ä–µ–∫—Ç Message
            lastMessageAt: chat.lastMessageAt,
            chatType: chat.chatType,
            isActive: chat.isActive,
            createdAt: chat.createdAt,
            updatedAt: chat.updatedAt
        }));
        
        res.json(formattedChats);
        
    } catch (error) {
        console.error('‚ùå Get chats with messages error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ (–ó–ê–©–ò–©–ï–ù–û)
router.get('/:chatId', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        
        console.log(`üí¨ Getting chat ${chatId} for user: ${req.user.nickname}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –ø–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º lastMessage
        const chat = await Chat.findById(chatId);
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'Access denied. You are not a participant of this chat' });
        }
        
        console.log(`‚úÖ Chat found and user is participant`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å lastMessage –∫–∞–∫ String ID
        res.json(formatChatResponse(chat));
        
    } catch (error) {
        console.error('‚ùå Get chat error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —á–∞—Ç–µ —Å –ø–æ–ª–Ω—ã–º lastMessage (–ó–ê–©–ò–©–ï–ù–û)
router.get('/:chatId/with-message', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        
        console.log(`üí¨ Getting chat ${chatId} with full message for user: ${req.user.nickname}`);
        
        // –ó–î–ï–°–¨ –ø–æ–ø—É–ª—è—Ä–∏–∑–∏—Ä—É–µ–º lastMessage
        const chat = await Chat.findById(chatId).populate('lastMessage');
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'Access denied. You are not a participant of this chat' });
        }
        
        console.log(`‚úÖ Chat found with full message info`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –ø–æ–ª–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º lastMessage
        res.json({
            _id: chat._id.toString(),
            participants: chat.participants,
            lastMessage: chat.lastMessage, // –ü–û–õ–ù–´–ô –æ–±—ä–µ–∫—Ç Message
            lastMessageAt: chat.lastMessageAt,
            chatType: chat.chatType,
            isActive: chat.isActive,
            createdAt: chat.createdAt,
            updatedAt: chat.updatedAt
        });
        
    } catch (error) {
        console.error('‚ùå Get chat with message error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û)
router.put('/:chatId', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const { isActive } = req.body;
        
        console.log(`‚úèÔ∏è Updating chat ${chatId} by user: ${req.user.nickname}`);
        
        const chat = await Chat.findById(chatId);
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'Access denied. You are not a participant of this chat' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if (isActive !== undefined) {
            chat.isActive = isActive;
        }
        
        await chat.save();
        
        console.log(`‚úÖ Chat updated: ${chatId}`);
        
        res.json({
            message: 'Chat updated successfully',
            chat: formatChatResponse(chat)
        });
        
    } catch (error) {
        console.error('‚ùå Update chat error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û - —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏)
router.delete('/:chatId', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        
        console.log(`üóëÔ∏è Deleting chat ${chatId} by user: ${req.user.nickname}`);
        
        const chat = await Chat.findById(chatId);
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'Access denied. You are not a participant of this chat' });
        }
        
        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        chat.isActive = false;
        await chat.save();
        
        console.log(`‚úÖ Chat marked as inactive: ${chatId}`);
        
        res.json({
            message: 'Chat deleted successfully',
            chatId: chatId
        });
        
    } catch (error) {
        console.error('‚ùå Delete chat error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û)
router.get('/:chatId/participants', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        
        console.log(`üë• Getting participants for chat ${chatId} by user: ${req.user.nickname}`);
        
        const chat = await Chat.findById(chatId);
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'Access denied. You are not a participant of this chat' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö (–±–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        const User = require('../models/User');
        const participants = await User.find({
            _id: { $in: chat.participants }
        }).select('_id nickname firstName lastName avatar isOnline lastSeen');
        
        console.log(`‚úÖ Found ${participants.length} participants`);
        
        res.json({
            chatId: chatId,
            participants: participants.map(user => ({
                id: user._id,
                nickname: user.nickname,
                firstName: user.firstName || '',
                lastName: user.lastName || '',
                avatar: user.avatar || '',
                isOnline: user.isOnline || false,
                lastSeen: user.lastSeen,
                displayName: user.firstName && user.lastName 
                    ? `${user.firstName} ${user.lastName}` 
                    : user.nickname
            }))
        });
        
    } catch (error) {
        console.error('‚ùå Get chat participants error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç (–ó–ê–©–ò–©–ï–ù–û)
router.post('/:chatId/leave', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        
        console.log(`üö™ User ${req.user.nickname} leaving chat ${chatId}`);
        
        const chat = await Chat.findById(chatId);
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'You are not a participant of this chat' });
        }
        
        // –î–ª—è direct —á–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        if (chat.chatType === 'direct') {
            chat.isActive = false;
            await chat.save();
            
            console.log(`‚úÖ Direct chat marked as inactive: ${chatId}`);
            
            return res.json({
                message: 'Left chat successfully',
                chatId: chatId
            });
        }
        
        // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const normalizedCurrentUserId = normalizeUUID(req.user.id);
        chat.participants = chat.participants.filter(participantId => 
            normalizeUUID(participantId) !== normalizedCurrentUserId
        );
        
        // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫, –ø–æ–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        if (chat.participants.length <= 1) {
            chat.isActive = false;
        }
        
        await chat.save();
        
        console.log(`‚úÖ User left group chat: ${chatId}`);
        
        res.json({
            message: 'Left chat successfully',
            chatId: chatId,
            remainingParticipants: chat.participants.length
        });
        
    } catch (error) {
        console.error('‚ùå Leave chat error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û)
router.get('/:chatId/stats', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        
        console.log(`üìä Getting stats for chat ${chatId} by user: ${req.user.nickname}`);
        
        const chat = await Chat.findById(chatId);
        
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞
        if (!checkChatAccess(chat, req.user.id)) {
            console.log('‚ùå User not a participant of this chat');
            return res.status(403).json({ error: 'Access denied. You are not a participant of this chat' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        const Message = require('../models/Message');
        
        const normalizedCurrentUserId = normalizeUUID(req.user.id);
        
        const totalMessages = await Message.countDocuments({ chatId });
        const userMessages = await Message.countDocuments({ 
            chatId, 
            senderId: normalizedCurrentUserId
        });
        
        const firstMessage = await Message.findOne({ chatId })
            .sort({ createdAt: 1 })
            .select('createdAt senderId');
            
        const lastMessage = await Message.findOne({ chatId })
            .sort({ createdAt: -1 })
            .select('createdAt senderId');
        
        // –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        const messagesByType = await Message.aggregate([
            { $match: { chatId: chat._id } },
            { $group: { _id: '$messageType', count: { $sum: 1 } } }
        ]);
        
        console.log(`‚úÖ Chat stats calculated for ${chatId}`);
        
        res.json({
            chatId: chatId,
            stats: {
                totalMessages,
                userMessages,
                otherMessages: totalMessages - userMessages,
                firstMessageAt: firstMessage?.createdAt || null,
                lastMessageAt: lastMessage?.createdAt || null,
                messagesByType: messagesByType.reduce((acc, item) => {
                    acc[item._id] = item.count;
                    return acc;
                }, {}),
                chatCreatedAt: chat.createdAt,
                isActive: chat.isActive
            }
        });
        
    } catch (error) {
        console.error('‚ùå Get chat stats error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

module.exports = router;