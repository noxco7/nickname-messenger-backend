// =====================================================
// –§–ê–ô–õ: services/websocket.js (BACKEND) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–£–¢–¨: nickname-messenger-backend/services/websocket.js
// –¢–ò–ü: Node.js Backend
// –û–ü–ò–°–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ WebSocket
// =====================================================

const User = require('../models/User');
const Message = require('../models/Message');
const Chat = require('../models/Chat');
const { verifyToken } = require('../middleware/auth');
const { sendPushNotification } = require('../services/pushNotificationService');

class WebSocketService {
    constructor(io) {
        this.io = io;
        this.connectedUsers = new Map(); // userId -> socketId
        this.userSockets = new Map(); // socketId -> userData
        this.chatRooms = new Map(); // chatId -> Set of socketIds
    }

    initialize() {
        this.io.on('connection', (socket) => {
            console.log('üîó Client connected:', socket.id);

            // JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ WebSocket
            socket.on('authenticate', async (data) => {
                try {
                    const { token } = data;
                    
                    if (!token) {
                        socket.emit('authenticated', { 
                            success: false, 
                            error: 'No token provided' 
                        });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
                    const userData = await verifyToken(token);
                    
                    if (userData) {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        this.connectedUsers.set(userData.id, socket.id);
                        this.userSockets.set(socket.id, userData);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await User.findByIdAndUpdate(userData.id, {
                            isOnline: true,
                            lastSeen: new Date()
                        });
                        
                        socket.userId = userData.id;
                        socket.userData = userData;
                        
                        socket.emit('authenticated', { 
                            success: true, 
                            userId: userData.id,
                            nickname: userData.nickname
                        });
                        
                        this.broadcastUserStatus(userData.id, true);
                        
                        console.log(`‚úÖ User ${userData.nickname} authenticated via JWT`);
                    } else {
                        socket.emit('authenticated', { 
                            success: false, 
                            error: 'Invalid token' 
                        });
                    }
                } catch (error) {
                    console.error('‚ùå WebSocket authentication error:', error);
                    socket.emit('authenticated', { 
                        success: false, 
                        error: 'Authentication failed' 
                    });
                }
            });

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É
            socket.on('joinChat', async (data) => {
                try {
                    const { chatId } = data;
                    
                    if (!socket.userData) {
                        socket.emit('error', { message: 'Not authenticated' });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
                    const chat = await Chat.findById(chatId);
                    if (!chat || !chat.participants.includes(String(socket.userData.id))) {
                        socket.emit('error', { message: 'Access denied to chat' });
                        return;
                    }

                    socket.join(chatId);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞–ø—É –∫–æ–º–Ω–∞—Ç
                    if (!this.chatRooms.has(chatId)) {
                        this.chatRooms.set(chatId, new Set());
                    }
                    this.chatRooms.get(chatId).add(socket.id);
                    
                    socket.emit('joinedChat', { chatId });
                    console.log(`üì® Socket ${socket.id} joined chat ${chatId}`);
                } catch (error) {
                    console.error('‚ùå Join chat error:', error);
                    socket.emit('error', { message: 'Failed to join chat' });
                }
            });

            // –ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞
            socket.on('leaveChat', (data) => {
                const { chatId } = data;
                socket.leave(chatId);
                
                if (this.chatRooms.has(chatId)) {
                    this.chatRooms.get(chatId).delete(socket.id);
                    if (this.chatRooms.get(chatId).size === 0) {
                        this.chatRooms.delete(chatId);
                    }
                }
                
                socket.emit('leftChat', { chatId });
                console.log(`üì§ Socket ${socket.id} left chat ${chatId}`);
            });

            // ‚ÄºÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ë–†–ê–ë–û–¢–ß–ò–ö 'sendMessage' –£–î–ê–õ–Å–ù ‚ÄºÔ∏è
            // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
            // –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ HTTP-—Ä–æ—É—Ç–µ /api/messages/send. –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
            socket.on('sendReadReceipt', async (data) => {
                try {
                    const { messageId, chatId } = data;
                    
                    if (!socket.userData) {
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
                    const chat = await Chat.findById(chatId);
                    if (!chat || !chat.participants.includes(String(socket.userData.id))) {
                        return;
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è
                    const message = await Message.findById(messageId);
                    if (message) {
                        message.markAsRead(socket.userData.id);
                        await message.save();

                        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        socket.to(chatId).emit('messageRead', {
                            messageId: messageId,
                            userId: socket.userData.id,
                            readAt: new Date()
                        });

                        console.log(`üìñ Message ${messageId} marked as read by ${socket.userData.nickname}`);
                    }

                } catch (error) {
                    console.error('‚ùå Read receipt error:', error);
                }
            });

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞
            socket.on('typing', (data) => {
                const { chatId, isTyping } = data;
                
                if (!socket.userData) return;

                socket.to(chatId).emit('userTyping', {
                    userId: socket.userData.id,
                    nickname: socket.userData.nickname,
                    isTyping: isTyping
                });
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            socket.on('disconnect', async () => {
                console.log('üîå Client disconnected:', socket.id);
                
                const userData = this.userSockets.get(socket.id);
                if (userData) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await User.findByIdAndUpdate(userData.id, {
                        isOnline: false,
                        lastSeen: new Date()
                    });

                    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞–ø–æ–≤
                    this.connectedUsers.delete(userData.id);
                    this.userSockets.delete(socket.id);

                    // –£–¥–∞–ª—è–µ–º –∏–∑ —á–∞—Ç-–∫–æ–º–Ω–∞—Ç
                    for (const [chatId, sockets] of this.chatRooms.entries()) {
                        sockets.delete(socket.id);
                        if (sockets.size === 0) {
                            this.chatRooms.delete(chatId);
                        }
                    }

                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                    this.broadcastUserStatus(userData.id, false);

                    console.log(`üëã User ${userData.nickname} disconnected`);
                }
            });
        });

        console.log('üöÄ WebSocket service initialized');
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async broadcastUserStatus(userId, isOnline) {
        try {
            const chats = await Chat.find({ participants: userId });
            
            for (const chat of chats) {
                this.io.to(chat._id.toString()).emit('userStatus', {
                    userId,
                    isOnline,
                    timestamp: new Date()
                });
            }
        } catch (error) {
            console.error('‚ùå Broadcast user status error:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    async sendSystemMessage(chatId, content) {
        try {
            const systemMessage = new Message({
                chatId: chatId,
                senderId: 'system',
                content: content,
                messageType: 'system',
                deliveryStatus: 'delivered'
            });

            await systemMessage.save();

            this.io.to(chatId).emit('message', {
                id: systemMessage._id,
                chatId: systemMessage.chatId,
                senderId: 'system',
                content: systemMessage.content,
                messageType: 'system',
                timestamp: systemMessage.createdAt,
                isEncrypted: false
            });

            console.log(`üì¢ System message sent to chat ${chatId}: ${content}`);

        } catch (error) {
            console.error('‚ùå Send system message error:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    getConnectionStats() {
        return {
            connectedUsers: this.connectedUsers.size,
            activeChats: this.chatRooms.size,
            totalSockets: this.userSockets.size
        };
    }
}

module.exports = WebSocketService;