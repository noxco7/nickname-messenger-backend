// =====================================================
// –§–ê–ô–õ: routes/messages.js (BACKEND) - FIXED WITH DEBUGGING
// –ü–£–¢–¨: nickname-messenger-backend/routes/messages.js
// –¢–ò–ü: Node.js Backend
// –û–ü–ò–°–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–æ—É—Ç—ã —Å –æ—Ç–ª–∞–¥–∫–æ–π
// =====================================================

const express = require('express');
const Message = require('../models/Message');
const Chat = require('../models/Chat');
const { authenticateToken } = require('../middleware/auth');
const router = express.Router();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.post('/send', authenticateToken, async (req, res) => {
    try {
        const {
            chatId,
            content,
            messageType = 'text',
            cryptoAmount,
            transactionHash,
            transactionStatus,
            // –ù–û–í–û–ï: E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
            isEncrypted = false,
            encryptionData
        } = req.body;
        
        const senderId = req.user.id; // –ü–æ–ª—É—á–∞–µ–º –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
        
        console.log(`üì§ Sending message from ${req.user.nickname} to chat ${chatId}`);
        console.log(`üì§ Message type: ${messageType}, encrypted: ${isEncrypted}`);
        
        if (!chatId || !content) {
            return res.status(400).json({
                error: 'Missing required fields: chatId, content'
            });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–ª–∞–¥–∫–æ–π
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log(`üîç DEBUGGING CHAT PARTICIPANTS:`);
        console.log(`   - Chat ID: ${chatId}`);
        console.log(`   - User ID: ${senderId}`);
        console.log(`   - User ID type: ${typeof senderId}`);
        console.log(`   - Chat participants:`, chat.participants);
        console.log(`   - Chat participants types:`, chat.participants.map(p => typeof p));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const userIdStr = String(senderId);
        const participantStrs = chat.participants.map(p => String(p));
        const isParticipant = participantStrs.includes(userIdStr);
        
        console.log(`   - User ID as string: "${userIdStr}"`);
        console.log(`   - Participants as strings:`, participantStrs);
        console.log(`   - Is participant: ${isParticipant}`);
        
        if (!isParticipant) {
            console.log('‚ùå User not authorized to send message to this chat');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat',
                debug: {
                    userId: userIdStr,
                    participants: participantStrs,
                    chatId: chatId
                }
            });
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageData = { 
            chatId, 
            senderId, 
            content, 
            messageType,
            isEncrypted,
            encryptionData: isEncrypted ? encryptionData : null
        };
        
        if (messageType === 'crypto') {
            if (cryptoAmount) messageData.cryptoAmount = cryptoAmount;
            if (transactionHash) messageData.transactionHash = transactionHash;
            if (transactionStatus) messageData.transactionStatus = transactionStatus;
        }
        
        const message = new Message(messageData);
        await message.save();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç
        await Chat.findByIdAndUpdate(chatId, {
            lastMessage: message._id,
            lastMessageAt: new Date()
        });
        
        await message.populate('senderId', 'nickname firstName lastName');
        
        console.log(`‚úÖ Message sent successfully: ${message._id}`);
        
        res.status(201).json(message);
        
    } catch (error) {
        console.error('‚ùå Send message error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û) - –ò–°–ü–†–ê–í–õ–ï–ù–û
router.get('/:chatId', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        console.log(`üì• Getting messages for chat ${chatId} by user: ${req.user.nickname}`);
        console.log(`üì• User ID: ${req.user.id} (type: ${typeof req.user.id})`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É —Å –æ—Ç–ª–∞–¥–∫–æ–π
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞
        console.log(`üîç DEBUGGING CHAT ACCESS:`);
        console.log(`   - Chat ID: ${chatId}`);
        console.log(`   - User ID: ${req.user.id}`);
        console.log(`   - User ID type: ${typeof req.user.id}`);
        console.log(`   - Chat participants:`, chat.participants);
        console.log(`   - Chat participants types:`, chat.participants.map(p => typeof p));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const userIdStr = String(req.user.id);
        const participantStrs = chat.participants.map(p => String(p));
        const hasAccess = participantStrs.includes(userIdStr);
        
        console.log(`   - User ID as string: "${userIdStr}"`);
        console.log(`   - Participants as strings:`, participantStrs);
        console.log(`   - Has access: ${hasAccess}`);
        
        if (!hasAccess) {
            console.log('‚ùå User not authorized to view messages in this chat');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat',
                debug: {
                    userId: userIdStr,
                    participants: participantStrs,
                    chatId: chatId
                }
            });
        }
        
        console.log(`‚úÖ User has access to chat, loading messages...`);
        
        const messages = await Message.find({ chatId })
            .populate('senderId', 'nickname firstName lastName avatar')
            .sort({ createdAt: -1 })
            .limit(limit)
            .skip(offset);
        
        console.log(`‚úÖ Found ${messages.length} messages for chat ${chatId}`);
        
        res.json(messages.reverse()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        
    } catch (error) {
        console.error('‚ùå Get messages error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.put('/:messageId/status', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        const { transactionStatus } = req.body;
        
        console.log(`üìù Updating message ${messageId} status by user: ${req.user.nickname}`);
        
        const message = await Message.findById(messageId);
        if (!message) {
            console.log('‚ùå Message not found');
            return res.status(404).json({ error: 'Message not found' });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const userIdStr = String(req.user.id);
        const senderIdStr = String(message.senderId);
        
        if (senderIdStr !== userIdStr) {
            console.log('‚ùå User not authorized to update this message');
            console.log(`   - User ID: "${userIdStr}"`);
            console.log(`   - Sender ID: "${senderIdStr}"`);
            return res.status(403).json({ error: 'Access denied. You can only update your own messages' });
        }
        
        if (transactionStatus) {
            message.transactionStatus = transactionStatus;
        }
        
        await message.save();
        
        console.log(`‚úÖ Message status updated: ${messageId}`);
        
        res.json({
            message: 'Message status updated successfully',
            messageId: messageId,
            transactionStatus: message.transactionStatus
        });
        
    } catch (error) {
        console.error('‚ùå Update message status error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–ó–ê–©–ò–©–ï–ù–û)
router.post('/:chatId/mark-read', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const { messageIds } = req.body; // –ú–∞—Å—Å–∏–≤ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–º–µ—Ç–∫–∏
        
        console.log(`üìñ Marking messages as read in chat ${chatId} by user: ${req.user.nickname}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå Chat not found');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const userIdStr = String(req.user.id);
        const participantStrs = chat.participants.map(p => String(p));
        
        if (!participantStrs.includes(userIdStr)) {
            console.log('‚ùå User not authorized to mark messages in this chat');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat',
                debug: {
                    userId: userIdStr,
                    participants: participantStrs
                }
            });
        }
        
        let markedCount = 0;
        
        if (messageIds && Array.isArray(messageIds)) {
            // –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for (const messageId of messageIds) {
                const message = await Message.findById(messageId);
                if (message && String(message.chatId) === chatId) {
                    if (!message.isReadBy(req.user.id)) {
                        message.markAsRead(req.user.id);
                        await message.save();
                        markedCount++;
                    }
                }
            }
        } else {
            // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            const unreadMessages = await Message.find({
                chatId: chatId,
                senderId: { $ne: req.user.id }, // –ù–µ –ø–æ–º–µ—á–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                'readReceipts.userId': { $ne: req.user.id }
            });
            
            for (const message of unreadMessages) {
                message.markAsRead(req.user.id);
                await message.save();
                markedCount++;
            }
        }
        
        console.log(`‚úÖ Marked ${markedCount} messages as read`);
        
        res.json({
            message: `Marked ${markedCount} messages as read`,
            markedCount: markedCount
        });
        
    } catch (error) {
        console.error('‚ùå Mark messages as read error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

module.exports = router;