// =====================================================
// –§–ê–ô–õ: routes/messages.js (BACKEND) - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–£–¢–¨: nickname-messenger-backend/routes/messages.js
// –û–ü–ò–°–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ª—É—á—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ push
// =====================================================

const express = require('express');
const Message = require('../models/Message');
const Chat = require('../models/Chat');
const User = require('../models/User');
const { authenticateToken } = require('../middleware/auth');
const { sendPushNotification } = require('../services/pushNotificationService');
const router = express.Router();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.post('/send', authenticateToken, async (req, res) => {
    try {
        const {
            chatId,
            content,
            messageType = 'text',
            cryptoAmount,
            transactionHash,
            transactionStatus,
            isEncrypted = false,
            encryptionData
        } = req.body;
        
        const senderId = req.user.id;
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${req.user.nickname} –≤ —á–∞—Ç ${chatId}`);
        console.log(`   –¢–∏–ø: ${messageType}, –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${isEncrypted}`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!chatId || !content) {
            return res.status(400).json({
                error: 'Missing required fields: chatId, content',
                code: 'MISSING_FIELDS'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ 
                error: 'Chat not found',
                code: 'CHAT_NOT_FOUND'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const userIdStr = String(senderId);
        const participantStrs = chat.participants.map(p => String(p));
        if (!participantStrs.includes(userIdStr)) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat',
                code: 'ACCESS_DENIED'
            });
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageData = { 
            chatId, 
            senderId, 
            content, 
            messageType,
            isEncrypted,
            encryptionData: isEncrypted ? encryptionData : null,
            cryptoAmount,
            transactionHash,
            transactionStatus,
            deliveryStatus: 'delivered'
        };
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = new Message(messageData);
        await message.save();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        await Chat.findByIdAndUpdate(chatId, {
            lastMessage: message._id,
            lastMessageAt: new Date()
        });
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await message.populate('senderId', 'nickname firstName lastName avatar publicKey tronAddress');
        
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${message._id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
        const io = req.io;
        if (io) {
            const webSocketMessage = {
                _id: message._id,
                id: message._id,
                chatId: message.chatId.toString(),
                senderId: message.senderId._id.toString(),
                content: message.content,
                messageType: message.messageType,
                timestamp: message.createdAt,
                isEncrypted: message.isEncrypted,
                encryptionData: message.encryptionData,
                deliveryStatus: message.deliveryStatus,
                cryptoAmount: message.cryptoAmount,
                transactionHash: message.transactionHash,
                transactionStatus: message.transactionStatus,
                senderInfo: {
                    _id: message.senderId._id.toString(),
                    id: message.senderId._id.toString(),
                    nickname: message.senderId.nickname,
                    firstName: message.senderId.firstName,
                    lastName: message.senderId.lastName,
                    avatar: message.senderId.avatar,
                    publicKey: message.senderId.publicKey
                }
            };
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ —á–∞—Ç–∞
            io.to(chatId.toString()).emit('message', webSocketMessage);
            console.log(`üì° –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ WebSocket –≤ –∫–æ–º–Ω–∞—Ç—É: ${chatId}`);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const recipientId = chat.participants.find(p => String(p) !== String(senderId));
        if (recipientId) {
            console.log(`üîç –ò—â–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å ID: ${recipientId}`);
            
            const recipient = await User.findById(recipientId);
            if (recipient) {
                console.log(`üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: ${recipient.nickname}`);
                
                if (recipient.deviceTokens && recipient.deviceTokens.length > 0) {
                    // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                    const validTokens = recipient.deviceTokens.filter(token => 
                        token && typeof token === 'string' && token.trim().length > 0
                    );
                    
                    console.log(`üì± –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${validTokens.length} –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
                    
                    if (validTokens.length > 0) {
                        const senderName = message.senderId.nickname;
                        const notificationTitle = `New message from ${senderName}`;
                        const notificationBody = isEncrypted ? 
                            'üîê Encrypted message' : 
                            (content.length > 100 ? content.substring(0, 97) + '...' : content);
                        
                        const payload = { 
                            chatId: chatId.toString(),
                            messageId: message._id.toString(),
                            senderId: senderId.toString(),
                            senderName: senderName,
                            type: 'message'
                        };
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        const result = await sendPushNotification(
                            validTokens,
                            notificationTitle,
                            notificationBody,
                            payload
                        );
                        
                        if (result) {
                            console.log(`üìä Push —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.successCount} —É—Å–ø–µ—à–Ω–æ, ${result.failureCount} –Ω–µ—É–¥–∞—á–Ω–æ`);
                        }
                    } else {
                        console.log(`‚ö†Ô∏è –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${recipient.nickname} –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ${recipient.nickname} –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤`);
                }
            } else {
                console.log(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å ID ${recipientId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(201).json(message);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            code: 'INTERNAL_ERROR',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û)
router.get('/:chatId', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        const chat = await Chat.findById(chatId);
        if (!chat) {
            return res.status(404).json({ 
                error: 'Chat not found',
                code: 'CHAT_NOT_FOUND'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        const userIdStr = String(req.user.id);
        const participantStrs = chat.participants.map(p => String(p));
        
        if (!participantStrs.includes(userIdStr)) {
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat',
                code: 'ACCESS_DENIED'
            });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const messages = await Message.find({ chatId })
            .populate('senderId', 'nickname firstName lastName avatar publicKey tronAddress')
            .sort({ createdAt: -1 })
            .limit(limit)
            .skip(offset);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        res.json(messages.reverse());
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            code: 'INTERNAL_ERROR'
        });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.put('/:messageId/status', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        const { transactionStatus } = req.body;
        
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
        
        const message = await Message.findById(messageId);
        if (!message) {
            return res.status(404).json({ 
                error: 'Message not found',
                code: 'MESSAGE_NOT_FOUND'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if (String(message.senderId) !== String(req.user.id)) {
            return res.status(403).json({ 
                error: 'Access denied. You can only update your own messages',
                code: 'ACCESS_DENIED'
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (transactionStatus) {
            message.transactionStatus = transactionStatus;
            await message.save();
            
            console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: ${transactionStatus}`);
        }
        
        res.json({ 
            message: 'Message status updated successfully',
            messageId: messageId,
            transactionStatus: transactionStatus
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            code: 'INTERNAL_ERROR'
        });
    }
});

// –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–ó–ê–©–ò–©–ï–ù–û)
router.post('/:chatId/mark-read', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const { messageIds } = req.body;
        
        console.log(`üìñ –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ ${chatId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        const chat = await Chat.findById(chatId);
        if (!chat) {
            return res.status(404).json({ 
                error: 'Chat not found',
                code: 'CHAT_NOT_FOUND'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if (!chat.participants.map(p => String(p)).includes(String(req.user.id))) {
            return res.status(403).json({ 
                error: 'Access denied',
                code: 'ACCESS_DENIED'
            });
        }
        
        let markedCount = 0;
        
        if (messageIds && Array.isArray(messageIds)) {
            // –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for (const messageId of messageIds) {
                const message = await Message.findById(messageId);
                if (message && String(message.chatId) === chatId && !message.isReadBy(req.user.id)) {
                    message.markAsRead(req.user.id);
                    await message.save();
                    markedCount++;
                    console.log(`   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ`);
                }
            }
        } else {
            // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const unreadMessages = await Message.find({
                chatId: chatId,
                senderId: { $ne: req.user.id },
                'readReceipts.userId': { $ne: req.user.id }
            });
            
            console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ ${unreadMessages.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            
            for (const message of unreadMessages) {
                message.markAsRead(req.user.id);
                await message.save();
                markedCount++;
            }
        }
        
        console.log(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: ${markedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        res.json({ 
            message: `Marked ${markedCount} messages as read`,
            markedCount: markedCount,
            chatId: chatId
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            code: 'INTERNAL_ERROR'
        });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.delete('/:messageId', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
        
        const message = await Message.findById(messageId);
        if (!message) {
            return res.status(404).json({ 
                error: 'Message not found',
                code: 'MESSAGE_NOT_FOUND'
            });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if (String(message.senderId) !== String(req.user.id)) {
            return res.status(403).json({ 
                error: 'Access denied. You can only delete your own messages',
                code: 'ACCESS_DENIED'
            });
        }
        
        await message.deleteOne();
        
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ`);
        
        res.json({ 
            message: 'Message deleted successfully',
            messageId: messageId
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            code: 'INTERNAL_ERROR'
        });
    }
});

module.exports = router;