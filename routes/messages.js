// =====================================================
// –§–ê–ô–õ: routes/messages.js (BACKEND) - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–£–¢–¨: nickname-messenger-backend/routes/messages.js
// –û–ü–ò–°–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ 'toString of undefined' –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ WebSocket-—Å–æ–±—ã—Ç–∏—è
// =====================================================

const express = require('express');
const Message = require('../models/Message');
const Chat = require('../models/Chat');
const { authenticateToken } = require('../middleware/auth');
const router = express.Router();

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.post('/send', authenticateToken, async (req, res) => {
    try {
        const {
            chatId,
            content,
            messageType = 'text',
            cryptoAmount,
            transactionHash,
            transactionStatus,
            isEncrypted = false,
            encryptionData
        } = req.body;
        
        const senderId = req.user.id;
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${req.user.nickname} –≤ —á–∞—Ç ${chatId}`);
        console.log(`üì§ –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageType}, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${isEncrypted}`);
        
        if (!chatId || !content) {
            return res.status(400).json({
                error: 'Missing required fields: chatId, content'
            });
        }
        
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        const userIdStr = String(senderId);
        const participantStrs = chat.participants.map(p => String(p));
        if (!participantStrs.includes(userIdStr)) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ—Ç —á–∞—Ç');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat'
            });
        }
        
        const messageData = { 
            chatId, 
            senderId, 
            content, 
            messageType,
            isEncrypted,
            encryptionData: isEncrypted ? encryptionData : null
        };
        
        if (messageType === 'crypto') {
            if (cryptoAmount) messageData.cryptoAmount = cryptoAmount;
            if (transactionHash) messageData.transactionHash = transactionHash;
            if (transactionStatus) messageData.transactionStatus = transactionStatus;
        }
        
        const message = new Message(messageData);
        await message.save();
        
        await Chat.findByIdAndUpdate(chatId, {
            lastMessage: message._id,
            lastMessageAt: new Date()
        });
        
        // ---> –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô
        // –°–Ω–∞—á–∞–ª–∞ "–∑–∞–ø–æ–ª–Ω—è–µ–º" (populate) –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await message.populate('senderId', 'nickname firstName lastName avatar');
        
        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message._id}`);

        // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        try {
            const io = req.io;
            const webSocketMessage = {
                _id: message._id,
                id: message._id,
                chatId: message.chatId.toString(),
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ senderId - —ç—Ç–æ –æ–±—ä–µ–∫—Ç, –∏ –±–µ—Ä–µ–º –∏–∑ –Ω–µ–≥–æ _id
                senderId: message.senderId._id.toString(),
                content: message.content,
                messageType: message.messageType,
                timestamp: message.createdAt,
                isEncrypted: message.isEncrypted,
                encryptionData: message.encryptionData,
                cryptoAmount: message.cryptoAmount,
                transactionHash: message.transactionHash,
                transactionStatus: message.transactionStatus,
                deliveryStatus: message.deliveryStatus,
                senderInfo: { // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                    nickname: message.senderId.nickname,
                    firstName: message.senderId.firstName,
                    lastName: message.senderId.lastName,
                    avatar: message.senderId.avatar
                }
            };

            io.to(chatId.toString()).emit('message', webSocketMessage);
            console.log(`üì° –°–æ–æ–±—â–µ–Ω–∏–µ ${message._id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ WebSocket –∫–æ–º–Ω–∞—Ç—É ${chatId}`);
        } catch (wsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket:', wsError);
        }
        // <--- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô
        
        res.status(201).json(message);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–ó–ê–©–ò–©–ï–ù–û)
router.get('/:chatId', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const limit = parseInt(req.query.limit) || 50;
        const offset = parseInt(req.query.offset) || 0;
        
        console.log(`üì• –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${chatId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${req.user.nickname}`);
        
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        const userIdStr = String(req.user.id);
        const participantStrs = chat.participants.map(p => String(p));
        
        if (!participantStrs.includes(userIdStr)) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat'
            });
        }
        
        const messages = await Message.find({ chatId })
            .populate('senderId', 'nickname firstName lastName avatar')
            .sort({ createdAt: -1 })
            .limit(limit)
            .skip(offset);
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        
        res.json(messages.reverse());
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ó–ê–©–ò–©–ï–ù–û)
router.put('/:messageId/status', authenticateToken, async (req, res) => {
    try {
        const { messageId } = req.params;
        const { transactionStatus } = req.body;
        
        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${req.user.nickname}`);
        
        const message = await Message.findById(messageId);
        if (!message) {
            console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return res.status(404).json({ error: 'Message not found' });
        }
        
        const userIdStr = String(req.user.id);
        const senderIdStr = String(message.senderId);
        
        if (senderIdStr !== userIdStr) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
            return res.status(403).json({ error: 'Access denied. You can only update your own messages' });
        }
        
        if (transactionStatus) {
            message.transactionStatus = transactionStatus;
        }
        
        await message.save();
        
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: ${messageId}`);
        
        res.json({
            message: 'Message status updated successfully',
            messageId: messageId,
            transactionStatus: message.transactionStatus
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö (–ó–ê–©–ò–©–ï–ù–û)
router.post('/:chatId/mark-read', authenticateToken, async (req, res) => {
    try {
        const { chatId } = req.params;
        const { messageIds } = req.body;
        
        console.log(`üìñ –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ ${chatId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${req.user.nickname}`);
        
        const chat = await Chat.findById(chatId);
        if (!chat) {
            console.log('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(404).json({ error: 'Chat not found' });
        }
        
        const userIdStr = String(req.user.id);
        const participantStrs = chat.participants.map(p => String(p));
        
        if (!participantStrs.includes(userIdStr)) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ');
            return res.status(403).json({ 
                error: 'Access denied. You are not a participant of this chat'
            });
        }
        
        let markedCount = 0;
        
        if (messageIds && Array.isArray(messageIds)) {
            for (const messageId of messageIds) {
                const message = await Message.findById(messageId);
                if (message && String(message.chatId) === chatId) {
                    if (!message.isReadBy(req.user.id)) {
                        message.markAsRead(req.user.id);
                        await message.save();
                        markedCount++;
                    }
                }
            }
        } else {
            const unreadMessages = await Message.find({
                chatId: chatId,
                senderId: { $ne: req.user.id },
                'readReceipts.userId': { $ne: req.user.id }
            });
            
            for (const message of unreadMessages) {
                message.markAsRead(req.user.id);
                await message.save();
                markedCount++;
            }
        }
        
        console.log(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${markedCount} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);
        
        res.json({
            message: `Marked ${markedCount} messages as read`,
            markedCount: markedCount
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

module.exports = router;