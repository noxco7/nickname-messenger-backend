const express = require('express');
const User = require('../models/User');
const router = express.Router();

// Get user by nickname
router.get('/nickname/:nickname', async (req, res) => {
    try {
        const { nickname } = req.params;
        
        console.log(`üë§ Looking for user with nickname: ${nickname}`);
        
        const user = await User.findOne({ nickname }).select('-__v');
        
        if (!user) {
            console.log(`‚ùå User not found: ${nickname}`);
            return res.status(404).json({ error: 'User not found' });
        }
        
        console.log(`‚úÖ User found: ${user.nickname}`);
        res.json(user);
        
    } catch (error) {
        console.error('Get user by nickname error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Get user by TRON address
router.get('/address/:address', async (req, res) => {
    try {
        const { address } = req.params;
        
        console.log(`üè† Looking for user with address: ${address}`);
        
        const user = await User.findOne({ tronAddress: address }).select('-__v');
        
        if (!user) {
            console.log(`‚ùå User not found by address: ${address}`);
            return res.status(404).json({ error: 'User not found' });
        }
        
        console.log(`‚úÖ User found by address: ${user.nickname}`);
        res.json(user);
        
    } catch (error) {
        console.error('Get user by address error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–û: Search users - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç query parameter
router.get('/search', async (req, res) => {
    try {
        const query = req.query.q; // –ü–æ–ª—É—á–∞–µ–º query –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?q=
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 20;
        const skip = (page - 1) * limit;
        
        console.log(`üîç Searching users with query: "${query}"`);
        console.log(`üìÑ Page: ${page}, Limit: ${limit}, Skip: ${skip}`);
        
        if (!query || query.trim().length === 0) {
            console.log('‚ö†Ô∏è Empty search query');
            return res.json({
                users: [],
                total: 0,
                page,
                limit
            });
        }
        
        const trimmedQuery = query.trim();
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
        const searchRegex = new RegExp(trimmedQuery, 'i');
        
        // –ü–æ–∏—Å–∫ –ø–æ nickname, firstName, lastName
        const searchCriteria = {
            $or: [
                { nickname: searchRegex },
                { firstName: searchRegex },
                { lastName: searchRegex }
            ]
        };
        
        console.log('üîé Search criteria:', JSON.stringify(searchCriteria, null, 2));
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        const users = await User.find(searchCriteria)
            .select('_id nickname firstName lastName avatar isOnline createdAt publicKey tronAddress') // –î–û–ë–ê–í–õ–ï–ù–´ publicKey –∏ tronAddress
            .sort({ createdAt: -1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            .limit(limit)
            .skip(skip);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        const total = await User.countDocuments(searchCriteria);
        
        console.log(`‚úÖ Found ${users.length} users (total: ${total})`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users.forEach(user => {
            console.log(`   - ${user.nickname} (${user.firstName || 'No first name'} ${user.lastName || 'No last name'})`);
        });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–∂–∏–¥–∞–µ–º–æ–º –∫–ª–∏–µ–Ω—Ç–æ–º
        res.json({
            users: users.map(user => ({
                id: user._id,
                nickname: user.nickname,
                firstName: user.firstName || '',
                lastName: user.lastName || '',
                avatar: user.avatar || '',
                isOnline: user.isOnline || false,
                publicKey: user.publicKey || '', // –î–û–ë–ê–í–õ–ï–ù–û
                tronAddress: user.tronAddress || '', // –î–û–ë–ê–í–õ–ï–ù–û
                createdAt: user.createdAt,
                // –î–æ–±–∞–≤–ª—è–µ–º displayName –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
                displayName: user.firstName && user.lastName 
                    ? `${user.firstName} ${user.lastName}` 
                    : user.nickname
            })),
            total,
            page,
            limit
        });
        
    } catch (error) {
        console.error('‚ùå Search users error:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            users: [],
            total: 0,
            page: 1,
            limit: 20 
        });
    }
});

// DEPRECATED: –°—Ç–∞—Ä—ã–π —Ä–æ—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
router.get('/search/:query', async (req, res) => {
    try {
        const { query } = req.params;
        const limit = parseInt(req.query.limit) || 20;
        
        console.log(`üîç [DEPRECATED] Searching users with query: "${query}"`);
        
        const users = await User.find({
            nickname: { $regex: query, $options: 'i' }
        })
        .select('nickname firstName lastName avatar isOnline')
        .limit(limit);
        
        console.log(`‚úÖ [DEPRECATED] Found ${users.length} users`);
        res.json(users);
        
    } catch (error) {
        console.error('Search users error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Get all users (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
router.get('/', async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 50;
        const skip = parseInt(req.query.skip) || 0;
        
        console.log(`üë• Getting all users (limit: ${limit}, skip: ${skip})`);
        
        const users = await User.find({})
            .select('nickname firstName lastName avatar isOnline createdAt')
            .sort({ createdAt: -1 })
            .limit(limit)
            .skip(skip);
        
        const total = await User.countDocuments({});
        
        console.log(`‚úÖ Found ${users.length} users (total: ${total})`);
        
        res.json({
            users,
            total,
            limit,
            skip
        });
        
    } catch (error) {
        console.error('Get all users error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Delete user account
router.delete('/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        console.log(`üóëÔ∏è Deleting user: ${userId}`);
        
        // –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById(userId);
        if (!user) {
            console.log(`‚ùå User not found: ${userId}`);
            return res.status(404).json({ error: 'User not found' });
        }
        
        console.log(`üóëÔ∏è Found user to delete: ${user.nickname}`);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const Chat = require('../models/Chat');
            const deletedChats = await Chat.deleteMany({ participants: userId });
            console.log(`üóëÔ∏è Deleted ${deletedChats.deletedCount} chats`);
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const Message = require('../models/Message');
            const deletedMessages = await Message.deleteMany({ senderId: userId });
            console.log(`üóëÔ∏è Deleted ${deletedMessages.deletedCount} messages`);
            
        } catch (error) {
            console.log(`‚ö†Ô∏è Error deleting related data: ${error.message}`);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        }
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.findByIdAndDelete(userId);
        
        console.log(`‚úÖ User and all related data deleted: ${user.nickname}`);
        
        res.json({ 
            message: 'User account and all related data deleted successfully',
            deletedUser: {
                id: userId,
                nickname: user.nickname
            }
        });
        
    } catch (error) {
        console.error('‚ùå Delete user error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

module.exports = router;