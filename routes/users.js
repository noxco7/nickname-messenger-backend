// =====================================================
// –§–ê–ô–õ: routes/users.js (BACKEND) - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–£–¢–¨: nickname-messenger-backend/routes/users.js  
// –û–ü–ò–°–ê–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
// =====================================================

const express = require('express');
const User = require('../models/User');
const { authenticateToken, optionalAuth } = require('../middleware/auth');
const router = express.Router();

// ---> –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ó–ê–©–ò–©–ï–ù–û)
router.post('/register-device', authenticateToken, async (req, res) => {
    try {
        const { deviceToken } = req.body;
        const userId = req.user.id;

        if (!deviceToken) {
            return res.status(400).json({ error: 'deviceToken is required' });
        }

        console.log(`üì± –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.nickname}`);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        await User.findByIdAndUpdate(userId, {
            $addToSet: { deviceTokens: deviceToken }
        });

        res.json({ message: 'Device token registered successfully' });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});
// <--- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô

// Get user by nickname (–ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—É–±–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
router.get('/nickname/:nickname', async (req, res) => {
    try {
        const { nickname } = req.params;
        
        console.log(`üë§ Looking for user with nickname: ${nickname}`);
        
        const user = await User.findOne({ nickname }).select('-__v');
        
        if (!user) {
            console.log(`‚ùå User not found: ${nickname}`);
            return res.status(404).json({ error: 'User not found' });
        }
        
        console.log(`‚úÖ User found: ${user.nickname}`);
        res.json(user);
        
    } catch (error) {
        console.error('Get user by nickname error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Get user by ID (–ó–ê–©–ò–©–ï–ù–û - —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.get('/id/:id', authenticateToken, async (req, res) => {
    try {
        const { id } = req.params;
        
        console.log(`üë§ Looking for user with ID: ${id}`);
        
        const user = await User.findById(id).select('-__v');
        
        if (!user) {
            console.log(`‚ùå User not found by ID: ${id}`);
            return res.status(404).json({ error: 'User not found' });
        }
        
        console.log(`‚úÖ User found by ID: ${user.nickname}`);
        res.json(user);
        
    } catch (error) {
        console.error('Get user by ID error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Get user by TRON address (–ë–ï–ó –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞)
router.get('/address/:address', async (req, res) => {
    try {
        const { address } = req.params;
        
        console.log(`üè† Looking for user with address: ${address}`);
        
        const user = await User.findOne({ tronAddress: address }).select('-__v');
        
        if (!user) {
            console.log(`‚ùå User not found by address: ${address}`);
            return res.status(404).json({ error: 'User not found' });
        }
        
        console.log(`‚úÖ User found by address: ${user.nickname}`);
        res.json(user);
        
    } catch (error) {
        console.error('Get user by address error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Search users (–° –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
router.get('/search', authenticateToken, async (req, res) => {
    try {
        const query = req.query.q;
        const page = parseInt(req.query.page) || 1;
        const limit = parseInt(req.query.limit) || 20;
        const skip = (page - 1) * limit;
        
        console.log(`üîç Searching users with query: "${query}" by user: ${req.user.nickname}`);
        
        if (!query || query.trim().length === 0) {
            return res.json({ users: [], total: 0, page, limit });
        }
        
        const trimmedQuery = query.trim();
        const searchRegex = new RegExp(trimmedQuery, 'i');
        
        const searchCriteria = {
            $and: [
                {
                    $or: [
                        { nickname: searchRegex },
                        { firstName: searchRegex },
                        { lastName: searchRegex }
                    ]
                },
                { _id: { $ne: req.user.id } }
            ]
        };
        
        const users = await User.find(searchCriteria)
            .select('_id nickname firstName lastName avatar isOnline createdAt publicKey tronAddress')
            .sort({ createdAt: -1 })
            .limit(limit)
            .skip(skip);
        
        const total = await User.countDocuments(searchCriteria);
        
        console.log(`‚úÖ Found ${users.length} users (total: ${total}) excluding current user`);
        
        res.json({
            users: users.map(user => ({
                id: user._id,
                nickname: user.nickname,
                firstName: user.firstName || '',
                lastName: user.lastName || '',
                avatar: user.avatar || '',
                isOnline: user.isOnline || false,
                publicKey: user.publicKey || '',
                tronAddress: user.tronAddress || '',
                createdAt: user.createdAt.toISOString(),
                displayName: user.displayName
            })),
            total,
            page,
            limit
        });
        
    } catch (error) {
        console.error('‚ùå Search users error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Update user profile (–ó–ê–©–ò–©–ï–ù–û - —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)
router.put('/profile', authenticateToken, async (req, res) => {
    try {
        const { firstName, lastName, avatar } = req.body;
        
        console.log(`‚úèÔ∏è Updating profile for user: ${req.user.nickname}`);
        
        const updateData = {};
        if (firstName !== undefined) updateData.firstName = firstName;
        if (lastName !== undefined) updateData.lastName = lastName;
        if (avatar !== undefined) updateData.avatar = avatar;
        
        const updatedUser = await User.findByIdAndUpdate(
            req.user.id,
            updateData,
            { new: true, runValidators: true }
        );
        
        if (!updatedUser) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        res.json({
            message: 'Profile updated successfully',
            user: updatedUser
        });
        
    } catch (error) {
        console.error('Update profile error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Delete user account (–ó–ê–©–ò–©–ï–ù–û - —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç)
router.delete('/account', authenticateToken, async (req, res) => {
    try {
        const userId = req.user.id;
        
        console.log(`üóëÔ∏è Deleting account for user: ${req.user.nickname}`);
        
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const Chat = require('../models/Chat');
        await Chat.deleteMany({ participants: userId });
        
        const Message = require('../models/Message');
        await Message.deleteMany({ senderId: userId });
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await User.findByIdAndDelete(userId);
        
        console.log(`‚úÖ Account and all related data deleted: ${user.nickname}`);
        
        res.json({ message: 'Account deleted successfully' });
        
    } catch (error) {
        console.error('‚ùå Delete account error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});


module.exports = router;