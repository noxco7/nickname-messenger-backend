// =====================================================
// –§–ê–ô–õ: middleware/auth.js (BACKEND)
// –ü–£–¢–¨: nickname-messenger-backend/middleware/auth.js
// –¢–ò–ü: Node.js Backend
// –û–ü–ò–°–ê–ù–ò–ï: JWT middleware –¥–ª—è –∑–∞—â–∏—Ç—ã API endpoints
// =====================================================

const jwt = require('jsonwebtoken');
const User = require('../models/User');

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ .env)
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.startsWith('Bearer ') 
            ? authHeader.substring(7) 
            : null;

        if (!token) {
            console.log('‚ùå No token provided');
            return res.status(401).json({ 
                error: 'Access denied. No token provided.',
                code: 'NO_TOKEN' 
            });
        }

        console.log('üîê Verifying token...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, JWT_SECRET);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ _id: decoded.userId });
        if (!user) {
            console.log('‚ùå User not found for token');
            return res.status(401).json({ 
                error: 'Invalid token. User not found.',
                code: 'USER_NOT_FOUND' 
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request
        req.user = {
            id: user._id,
            nickname: user.nickname,
            publicKey: user.publicKey,
            tronAddress: user.tronAddress
        };

        console.log(`‚úÖ Token verified for user: ${user.nickname}`);
        next();

    } catch (error) {
        console.log('‚ùå Token verification failed:', error.message);
        
        if (error.name === 'TokenExpiredError') {
            return res.status(401).json({ 
                error: 'Token expired. Please login again.',
                code: 'TOKEN_EXPIRED' 
            });
        }
        
        if (error.name === 'JsonWebTokenError') {
            return res.status(401).json({ 
                error: 'Invalid token format.',
                code: 'INVALID_TOKEN' 
            });
        }

        return res.status(401).json({ 
            error: 'Token verification failed.',
            code: 'TOKEN_ERROR' 
        });
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (userId) => {
    const payload = {
        userId: userId,
        iat: Math.floor(Date.now() / 1000)
    };

    const token = jwt.sign(payload, JWT_SECRET, { 
        expiresIn: JWT_EXPIRES_IN 
    });

    console.log(`üîë Generated token for user: ${userId}`);
    return token;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –±–µ–∑ middleware (–¥–ª—è WebSocket)
const verifyToken = async (token) => {
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = await User.findOne({ _id: decoded.userId });
        
        if (!user) {
            throw new Error('User not found');
        }

        return {
            id: user._id,
            nickname: user.nickname,
            publicKey: user.publicKey,
            tronAddress: user.tronAddress
        };
    } catch (error) {
        throw new Error('Invalid token');
    }
};

// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å)
const optionalAuth = async (req, res, next) => {
    try {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.startsWith('Bearer ') 
            ? authHeader.substring(7) 
            : null;

        if (token) {
            const decoded = jwt.verify(token, JWT_SECRET);
            const user = await User.findOne({ _id: decoded.userId });
            
            if (user) {
                req.user = {
                    id: user._id,
                    nickname: user.nickname,
                    publicKey: user.publicKey,
                    tronAddress: user.tronAddress
                };
            }
        }

        next();
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        next();
    }
};

module.exports = {
    authenticateToken,
    generateToken,
    verifyToken,
    optionalAuth,
    JWT_SECRET
};
