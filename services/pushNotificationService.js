// =====================================================
// –§–ê–ô–õ: services/pushNotificationService.js (BACKEND) - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ü–£–¢–¨: nickname-messenger-backend/services/pushNotificationService.js
// –û–ü–ò–°–ê–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
// =====================================================

const admin = require('firebase-admin');
const path = require('path');
const User = require('../models/User');

// –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—é—á—É
const serviceAccountPath = path.join(__dirname, '..', 'firebase-service-account-key.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
    if (!admin.apps.length) {
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccountPath)
        });
        console.log('üî• Firebase Admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.');
    } else {
        console.log('‚ÑπÔ∏è Firebase Admin SDK —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase Admin SDK:', error.message);
    console.error('‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª "firebase-service-account-key.json" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.');
    console.error('‚ùó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ APNs –≤ Firebase Console.');
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * @param {Array<string>} deviceTokens - –ú–∞—Å—Å–∏–≤ FCM —Ç–æ–∫–µ–Ω–æ–≤
 * @param {string} title - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} body - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {Object} dataPayload - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
const sendPushNotification = async (deviceTokens, title, body, dataPayload = {}) => {
    if (!Array.isArray(deviceTokens) || deviceTokens.length === 0) {
        console.log('ü§î –ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
        return { success: false, successCount: 0, failureCount: 0 };
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const uniqueTokens = [...new Set(deviceTokens)]
        .filter(token => token && typeof token === 'string' && token.trim().length > 0);

    if (uniqueTokens.length === 0) {
        console.log('ü§î –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
        return { success: false, successCount: 0, failureCount: 0 };
    }

    console.log(`üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ ${uniqueTokens.length} —É—Å—Ç—Ä–æ–π—Å—Ç–≤...`);
    console.log('üì± –¢–æ–∫–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:');
    uniqueTokens.forEach((token, idx) => {
        console.log(`   ${idx + 1}. ${token.substring(0, 30)}...${token.substring(token.length - 10)}`);
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = {
        notification: {
            title: title,
            body: body,
        },
        data: {
            ...dataPayload,
            click_action: "FLUTTER_NOTIFICATION_CLICK",
            // –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            timestamp: new Date().toISOString()
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è iOS (APNs)
        apns: {
            payload: {
                aps: {
                    alert: {
                        title: title,
                        body: body
                    },
                    sound: 'default',
                    badge: 1,
                    'mutable-content': 1,
                    'content-available': 1
                }
            },
            headers: {
                'apns-priority': '10',
                'apns-push-type': 'alert',
                'apns-topic': 'com.noxco.Nickname-Messenger' // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Bundle ID
            }
        },
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Android
        android: {
            priority: 'high',
            notification: {
                sound: 'default',
                priority: 'high',
                channelId: 'default',
                clickAction: 'FLUTTER_NOTIFICATION_CLICK'
            },
            data: dataPayload
        },
        // –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        tokens: uniqueTokens,
    };

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const response = await admin.messaging().sendEachForMulticast(message);
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:`);
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${response.successCount}`);
        console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${response.failureCount}`);
        
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        const invalidTokens = [];
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        response.responses.forEach((resp, idx) => {
            const token = uniqueTokens[idx];
            
            if (resp.success) {
                console.log(`   ‚úÖ –¢–æ–∫–µ–Ω ${idx + 1}: –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
                console.log(`      Message ID: ${resp.messageId}`);
            } else if (resp.error) {
                console.log(`   ‚ùå –¢–æ–∫–µ–Ω ${idx + 1}: ${resp.error.code}`);
                console.log(`      –°–æ–æ–±—â–µ–Ω–∏–µ: ${resp.error.message}`);
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if (resp.error.code === 'messaging/third-party-auth-error') {
                    console.log('   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° APNs –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô:');
                    console.log('      1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ APNs –∫–ª—é—á/—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ Firebase Console');
                    console.log('      2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Bundle ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Firebase');
                    console.log('      3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ APNs –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –∏—Å—Ç–µ–∫');
                    console.log('      4. –î–ª—è Production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Production APNs —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç');
                    console.log('      5. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ Xcode –≤–∫–ª—é—á–µ–Ω—ã Push Notifications');
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                const invalidCodes = [
                    'messaging/invalid-registration-token',
                    'messaging/registration-token-not-registered',
                    'messaging/invalid-argument',
                    'messaging/invalid-recipient',
                    'messaging/invalid-apns-credentials'
                ];
                
                if (invalidCodes.includes(resp.error.code)) {
                    invalidTokens.push(token);
                    console.log(`      üóëÔ∏è –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
                }
                
                // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ)
                const temporaryErrorCodes = [
                    'messaging/server-unavailable',
                    'messaging/internal-error',
                    'messaging/too-many-messages'
                ];
                
                if (temporaryErrorCodes.includes(resp.error.code)) {
                    console.log(`      ‚è≥ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ`);
                }
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (invalidTokens.length > 0) {
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ ${invalidTokens.length} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
            
            try {
                const result = await User.updateMany(
                    { deviceTokens: { $in: invalidTokens } },
                    { $pull: { deviceTokens: { $in: invalidTokens } } }
                );
                
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ ${result.modifiedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
            } catch (dbError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', dbError);
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            success: response.successCount > 0,
            successCount: response.successCount,
            failureCount: response.failureCount,
            responses: response.responses.map((resp, idx) => ({
                token: uniqueTokens[idx].substring(0, 20) + '...',
                success: resp.success,
                error: resp.error ? resp.error.code : null
            }))
        };
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
        if (error.code === 'app/invalid-credential') {
            console.error('‚ùå –ü–†–û–ë–õ–ï–ú–ê –° FIREBASE CREDENTIALS:');
            console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ firebase-service-account-key.json');
            console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
        }
        
        if (error.code === 'messaging/authentication-error') {
            console.error('‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ï–ô:');
            console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Firebase Console');
            console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Cloud Messaging API –≤–∫–ª—é—á–µ–Ω');
        }
        
        return {
            success: false,
            successCount: 0,
            failureCount: uniqueTokens.length,
            error: error.message
        };
    }
};

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} deviceToken - FCM —Ç–æ–∫–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
const sendTestNotification = async (deviceToken) => {
    if (!deviceToken || typeof deviceToken !== 'string') {
        console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
        return false;
    }
    
    console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    console.log(`   –¢–æ–∫–µ–Ω: ${deviceToken.substring(0, 30)}...`);
    
    const message = {
        notification: {
            title: 'üéâ Test Notification',
            body: 'This is a test push notification from Nickname Messenger'
        },
        data: {
            type: 'test',
            timestamp: new Date().toISOString()
        },
        apns: {
            payload: {
                aps: {
                    alert: {
                        title: 'üéâ Test Notification',
                        body: 'This is a test push notification from Nickname Messenger'
                    },
                    sound: 'default',
                    badge: 1
                }
            },
            headers: {
                'apns-priority': '10',
                'apns-push-type': 'alert'
            }
        },
        android: {
            priority: 'high',
            notification: {
                sound: 'default',
                priority: 'high',
                channelId: 'default'
            }
        },
        token: deviceToken
    };
    
    try {
        const response = await admin.messaging().send(message);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', response);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.code, error.message);
        
        if (error.code === 'messaging/third-party-auth-error') {
            console.error('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å APNs. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ Firebase Console');
        }
        
        return false;
    }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è FCM —Ç–æ–∫–µ–Ω–∞
 * @param {string} deviceToken - FCM —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
const validateDeviceToken = async (deviceToken) => {
    if (!deviceToken || typeof deviceToken !== 'string' || deviceToken.trim().length === 0) {
        return false;
    }
    
    try {
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "—Å—É—Ö–æ–µ" —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (dry run)
        const message = {
            token: deviceToken,
            data: {
                test: 'validation'
            }
        };
        
        await admin.messaging().send(message, true); // true = dry run
        console.log(`‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π: ${deviceToken.substring(0, 30)}...`);
        return true;
    } catch (error) {
        console.log(`‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π: ${error.code}`);
        return false;
    }
};

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
 */
const cleanupInvalidTokens = async () => {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...');
    
    try {
        const users = await User.find({ 
            deviceTokens: { $exists: true, $ne: [] } 
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–∞–º–∏`);
        
        let totalTokens = 0;
        let invalidTokens = 0;
        
        for (const user of users) {
            const validTokens = [];
            
            for (const token of user.deviceTokens) {
                totalTokens++;
                
                if (await validateDeviceToken(token)) {
                    validTokens.push(token);
                } else {
                    invalidTokens++;
                    console.log(`   ‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω —É ${user.nickname}`);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (validTokens.length !== user.deviceTokens.length) {
                user.deviceTokens = validTokens;
                await user.save();
                console.log(`   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –¥–ª—è ${user.nickname}: ${validTokens.length} –≤–∞–ª–∏–¥–Ω—ã—Ö`);
            }
        }
        
        console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${invalidTokens} –∏–∑ ${totalTokens} —Ç–æ–∫–µ–Ω–æ–≤ —É–¥–∞–ª–µ–Ω–æ`);
        
        return {
            totalUsers: users.length,
            totalTokens: totalTokens,
            invalidTokens: invalidTokens,
            validTokens: totalTokens - invalidTokens
        };
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        throw error;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
    sendPushNotification,
    sendTestNotification,
    validateDeviceToken,
    cleanupInvalidTokens
};